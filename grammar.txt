{
  var SequenceStub = function(source, alignment)
  {
    this.type_ = "sequence";
    this.arguments_ = { alignment : alignment};
    this.source_ = source;
  }

  var OperantStub = function(name, args, source)
  {
    this.type_ = name;
    this.arguments_ = args;
    this.source_ = source;
  }
}

start = input

// ----- Numbers -----

number "number"
  = minus? int frac? exp? { return parseFloat(text()); }

decimal_point
  = "."

digit1_9
  = [1-9]

e
  = [eE]

exp
  = e (minus / plus)? DIGIT+

frac
  = decimal_point DIGIT+

int
  = zero / (digit1_9 DIGIT*)

minus
  = "-"

plus
  = "+"

zero
  = "0"

DIGIT  = [0-9]

// ------------------ alpha numeral ---------------------------

ws "whitespace" = " "*
comma = ws "," ws;
quote = '"'

// ------------------ steps and cycles ---------------------------

// single step definition
step_char =  [0-9a-zA-Z~] / "-" / "#"
step = ws chars:step_char+ ws { return chars.join("") }

// define a sub cycle i.e. [1 2, 3 [4]]
sub_cycle = ws  "[" ws s:stack ws "]" ws { return s}

// define a timeline i.e. <1 3 [3 5]>. We simply defer to a stack and change the alignement
timeline = ws "<" ws sc:single_cycle ws ">" ws
  { sc.arguments_.alignment = "t"; return sc;}

// a slice is either a single step or a sub cycle
slice = step / sub_cycle  / timeline

// a single cycle is a combination of one or more slices (as an array). If we
// have only one element, we skip the array and return the element itself
single_cycle = s:(slice)+
  { return new SequenceStub(s,"h"); }

// a stack is a serie of vertically aligned single cycles, separated by a comma
// if the stack contains only one element, we don't create a stack but return the
// underlying element
stack = c:single_cycle cs:(comma v:single_cycle { return v})*
  { if (cs.length == 0 && c instanceof Object) { return c;} else { cs.unshift(c); return new SequenceStub(cs,"v");}  }

// a sequence is a quoted stack
sequence = ws quote s:stack quote
  { return s; }

// ------------------ commands ---------------------------

command = slow / target

target = "target" ws quote s:step quote
  { return { name: "target", args : { name:s}}}

slow = "slow" ws a:number
  { return { name: "slow", args :{ amount: a}}}

// ------------------ high level  ---------------------------

sequ_or_command = s:sequence
     {return s}
   / c:command ws "$" ws soc:sequ_or_command
     { return new OperantStub(c.name,c.args,soc)}

input = sequ_or_command
